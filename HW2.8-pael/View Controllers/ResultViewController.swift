//
//  ResultViewController.swift
//  HW2.8-pael
//
//  Created by –°–µ—Ä–≥–µ–π –î–æ–ª–≥–∏—Ö on 07.11.2020.
//

import UIKit

class ResultViewController: UIViewController {
    
    @IBOutlet var pictureResult: UIImageView!
    @IBOutlet var shortInfoLabel: UILabel!
//    @IBOutlet var characteristicLabel: UILabel!
    
    @IBOutlet var characteristicTextView: UITextView!
    
    @IBOutlet var paelLabels: [UILabel]!
    
    var rawTestResult: Answer!
//    var rawTestResult = Answer(producer: 40, administrator: 4, entrepreneur: 56, integrator: 2)
    var paelKey = ""
    var result: Result?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        pictureResult.layer.cornerRadius = 15
        
        paelKey = calulateResultTest(from: rawTestResult)
        result = Result.getResult(text: paelKey)
        
        shortInfoLabel.text = result?.shortInfo
        characteristicTextView.text = result?.characteristic
        pictureResult.image = UIImage(named: result?.picture ?? "default")
        setPaelLabels(from: paelKey)
        
        navigationItem.title = result?.shortInfo
        navigationItem.largeTitleDisplayMode = .never
        navigationItem.hidesBackButton = true
        
    }
    
    // MARK: - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ª–µ–π–±–ª—ã
    private func setPaelLabels(from result: String) {
        paelLabels.forEach { (label) in
            
            label.text = get–°haracter(number: label.tag, from: result)
            
            switch label.tag {
            case 0:
                label.text? += ": \(rawTestResult.producer)"
            case 1:
                label.text? += ": \(rawTestResult.administrator)"
            case 2:
                label.text? += ": \(rawTestResult.entrepreneur)"
            default:
                label.text? += ": \(rawTestResult.integrator)"
            }
        }
    }
    //MARK: - –†–∞—Å—á–µ—Ç –∫–ª—é—á–∞ paei
    private func calulateResultTest(from: Answer) -> String {
        var result = ""
        
        result += identifyFrom(characters: ["P", "p"], and: rawTestResult.producer)
        result += identifyFrom(characters: ["A", "a"], and: rawTestResult.administrator)
        result += identifyFrom(characters: ["E", "e"], and: rawTestResult.entrepreneur)
        result += identifyFrom(characters: ["I", "i"], and: rawTestResult.integrator)
        
        return result
    }
    
    //MARK: - –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—É–∫–≤—ã –¥–ª—è –∫–ª—é—á–∞ pael
    private func identifyFrom(characters: [String], and number: Int) -> String {
        var result = ""
        
        assert(characters.count == 2, "–ü–µ—Ä–µ–¥–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤")
        
        switch number {
        case 30...:
            result = characters.first ?? "üò±"
        case 20..<30:
            result = characters.last ?? "üò±"
        default:
            result = "-"
        }
        
        return result
    }
}
    //MARK: - –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–∑ —Å—Ç—Ä–æ–∫–∏
    private func get–°haracter(number: Int, from string: String) -> String {
        let index = string.index(string.startIndex, offsetBy: number)
        return String(string[index])
    }

